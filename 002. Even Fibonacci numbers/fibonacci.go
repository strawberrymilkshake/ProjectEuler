//  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

package main

import (
	"fmt"
	"time"
)

func iseven(i int) bool {
	if i%2 == 0 {
		return true
	}
	return false
}

type fibonacci struct {
	numbers [3]int
}

func (f *fibonacci) GetNextNum() int {
	if f.numbers[2] == 0 {
		f.numbers = [3]int{1, 1, 1}
	} else {
		f.numbers[0], f.numbers[1] = f.numbers[1], f.numbers[2]
		f.numbers[2] = f.numbers[0] + f.numbers[1]
	}
	return f.numbers[2]
}

func main() {
	t := time.Now()
	f := new(fibonacci)
	sum := 0
	for {
		n := f.GetNextNum()
		if n > 4000000 {
			breaks
		}
		if iseven(n) {
			sum += n
		}
	}
	fmt.Printf("The sum is %v\n", sum)
	fmt.Println("Execution time was:", time.Since(t))
}
