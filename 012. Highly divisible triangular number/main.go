/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
package main

import (
	"fmt"
	"math"
)

//divisors finds how many divisors a numder has
//we need to check divisors from 1 to sqrt(n) only, and then double the results
func divisors(n int) int {
	var cnt int
	var limit = int(math.Sqrt(float64(n)))
	for i := 1; i <= limit; i++ {
		if n%i == 0 {
			cnt++
		}
	}
	return 2 * cnt
}

//Triangular returns a func which returns next triangle number
func triangular() func() int {
	i := 1
	sum := 0
	return func() int {
		sum += i
		i++
		return sum
	}
}

func main() {
	var num int
	tr := triangular()
	for {
		num = tr()
		if divisors(num) >= 500 {
			fmt.Println("The first triangle number with over 500 divisors is", num)
			break
		}
	}
}
